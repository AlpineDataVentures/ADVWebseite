---
import Step from "@/components/data-assessment/Step";
import StepIndicator from "@/components/data-assessment/StepIndicator";
import PersonalInfo from "@/components/data-assessment/PersonalInfo";
import StepNavigation from "@/components/data-assessment/StepNavigation";
import AssessItem from "@/components/data-assessment/AssessItem";

import { assessItems } from "@/components/data-assessment/StepProvider";
import CheckoutList from "@/components/data-assessment/CheckoutList";
import Base from "@/layouts/Base.astro";

//
// Data-Readiness Assessment
//
// linker Teil: Fortschritts-Anzeige: Wo bin ich gerade? (StepIndicator)
// rechter Teil: Einzelne "Steps"
//
// Wie / wo wird geregelt welcher Step sichtbar ist?
// Wie werden die Zustände gesammelt? Wie kann ich die am Ende in eine Mail packen und an ADV schicken?
//
// Wie baue ich das Ganze auf Fragen um?
// - ich brauche eine Element, dass meine Fragen & Antwort-Möglichkeiten darstellt!
//   Brauche ich dazu eine React Komponente oder reicht HTML? Das hängt wahrscheinlich auch davon ab wie ich
//   den Zustand (sprich welche Antworten ausgewählt wurden!) verfolge.
// Erste Idee:
// Generische "AssessItem" => Stellen eine Frage. Die würde ich gerne durch ein MarkDown befüllen, so dass ich
// N-Fragen auf einmal in AssessItems und Steps befüllen kann!
//
// o Die PersonalInfo kann ich zum Erfassen der persönlichen Daten nutzen ...
//
---

<!--AssessmentLayout title="Data Maturity Assessment"-->
<Base title={"Data Maturity Assessment"}>
  <section class="mt-4 mb-16">
    <div class="container">
      <div class="justify-center">
        <!--nav class="nav-assessment">
          <StepIndicator client:only="react" />
        </nav-->

        <div class="step">
          <nav class="nav-assessment">
            <StepIndicator client:load />
          </nav>

          {
            assessItems.map((item, index) => (
              <Step step={index + 1} client:load>
                <AssessItem questionId={index + 1} item={item} client:load />
              </Step>
            ))
          }

          <Step step={assessItems.length + 1} client:idle>
            <PersonalInfo client:only="react" />
          </Step>

          <!-- CheckOut Step start -->
          <Step step={assessItems.length + 2} client:idle>
            <h1>Finishing up</h1>
            <p class="description">
              Double-check everything looks OK before confirming.
            </p>

            <CheckoutList client:only="react" />
          </Step>
          <!-- Checkout Step end -->

          <!-- Last Step start -->
          <Step step={assessItems.length + 3} client:idle>
            <article class="thank-you">
              <img
                src={`/images/data-assessment/icon-thank-you.svg`}
                alt="red check icon"
              />
              <h1>Vielen Dank!</h1>
              <p>
                Deine Antworten wurden erfolgreich erfasst! In Kürze erhältst
                per E-Mail das Ergebnis deiner Data-readiness!
              </p>
            </article>
          </Step>
          <!-- doppelt? StepNavigation client:only="react" /-->
          <!-- Last Step end -->

          <!-- Add buttons for navigation -->
          <StepNavigation client:only="react" />
          <!--/AssessmentLayout-->
        </div>
      </div>
    </div>
  </section>

  <style is:inline>
    :root {
      /* Primary */
      --marine-blue: hsl(213, 96%, 18%);
      --purplish-blue: hsl(243, 100%, 62%);
      --pastel-blue: hsl(228, 100%, 84%);
      --light-blue: hsl(206, 94%, 87%);
      --strawberry-red: hsl(354, 84%, 57%);
      /* Neutral */
      --cool-gray: hsl(231, 11%, 63%);
      --light-gray: hsl(229, 24%, 87%);
      --magnolia: -hsl(217, 100%, 97%);
      --alabaster: hsl(231, 100%, 99%);
      --white: hsl(0, 0%, 100%);
    }

    @media only screen and (min-width: 756px) {
      main {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
      }

      .step {
        width: 848px;
        height: 600px;
        display: flex;
        margin-top: unset;
        justify-content: space-between;
        padding: 20px;
        position: relative;
      }

      .navigation-buttons {
        display: none;
      }

      .step article {
        padding: 24px;
        margin-inline: 48px;
        flex: 1;
      }

      .step h1 {
        font-size: 32px;
      }

      .step nav {
        width: auto;
        height: auto;
        display: flex;
        background-image: url("/images/data-assessment/bg-sidebar-desktop.svg");
        background-size: cover;
        border-radius: 8px;
      }

      .step nav ul {
        justify-content: start;
        flex-direction: column;
        align-items: start;
      }

      .step-indicator {
        display: flex;
        align-items: center;
        gap: 16px;
      }

      .step-indicator > div {
        display: flex;
        flex-direction: column;
      }

      .step-indicator p,
      .step-indicator h2 {
        display: block;
        text-transform: uppercase;
      }

      .step-indicator p {
        font-weight: 400;
        font-size: 14px;
        color: var(--light-blue);
      }

      .step-indicator h2 {
        font-weight: 700;
        color: white;
      }

      .plan-selection {
        display: flex;
        justify-content: space-between;
        gap: 24px;
      }

      .plan-selection label {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        flex: 1;
        gap: 48px;
      }
      .plan-selection div {
        flex: unset;
      }

      .thank-you {
        justify-content: center;
      }

      .step .navigation-buttons {
        display: flex;
        right: calc(48px + 24px);
        left: unset;
        width: calc(100% - 220px - 48px * 2 - 24px * 2);
      }
    }
  </style>
</Base>
